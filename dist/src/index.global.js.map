{"version":3,"sources":["../../node_modules/@nkeff/cardboard-js/src/util.ts","../../node_modules/@nkeff/cardboard-js/src/events.ts","../../node_modules/@nkeff/cardboard-js/src/context.ts","../../node_modules/@nkeff/cardboard-js/src/observables.ts","../../node_modules/@nkeff/cardboard-js/src/text.ts","../../node_modules/@nkeff/cardboard-js/src/tag.ts","../../node_modules/@nkeff/cardboard-js/src/css-generator.ts","../../node_modules/@nkeff/cardboard-js/src/style-manager.ts","../../node_modules/@nkeff/cardboard-js/src/state.ts","../../node_modules/@nkeff/cardboard-js/src/each.ts","../../node_modules/@nkeff/cardboard-js/src/all-tags.ts","../../node_modules/@nkeff/cardboard-js/src/cardboard.ts","../../src/counter.ts","../../src/index.ts"],"names":["removeFromList","item","list","index","camelToDash","str","val","isObject","obj","isArray","args","uuidv4","c","CEvent","fn","data","el","singleEvent","context","isInitialized","checkInitialized","getMountPoint","mountPoint","tag","createGlobalObserver","_addedEvt","_removedEvt","mutations","observer","mut","n","Observable","destroyer","transform","compute","greaterThan","greaterThanOr","lessThan","lessThanOr","equalTo","notEqualTo","isEmpty","notEmpty","key","defaultVal","grab","target","p","receiver","newValue","callback","isObservable","createObservable","other","observable","cb","getValue","newVal","text","textTemplate","node","interpolatePattern","updateNode","m","g1","_a","CTag","_CTag","arg0","children","mountToParent","match","selector","element","newParent","checked","value","id","__async","parentEl","expectedIndex","hiddenBefore","i","child","nextEl","ifTrue","ifFalse","invert","temp","_","handleHide","correctedValue","classes","elseText","attr","style","styles","stylesheet","className","targetClass","replaceClass","property","styleNames","attrs","evt","consumer","evtName","cons","t","listener","result","cl","disabled","predicate","nodes","mapped","genCss","styleSheet","stylesheets","generatedCss","sheet","genBlock","genBlockContent","inside","blocks","newSelector","STYLE_TAG_ID","StyleManager","styleTag","error","css","state","initialValue","DiffState","interceptors","allTags","r","tagName","init","options","button","div","ct","Counter","count","self","ContionalComponent","G","setup","ft","g","main","pe","we"],"mappings":"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","file":"index.global.js","sourcesContent":["/** Removes an item from an array if it exists. It returns whether it was removed or not */\nexport const removeFromList = <T>(item: T, list?: T[]) => {\n  if (!list) return false;\n\n  const index = list.indexOf(item);\n\n  if (index !== -1) {\n    list.splice(index, 1);\n    return true;\n  }\n\n  return false;\n};\n\nexport const camelToDash = str => str.replace(/([A-Z])/g, val => `-${val.toLowerCase()}`);\n\nexport const isObject = (obj: any): boolean => {\n  return typeof obj === 'object' && !(obj instanceof Array);\n};\nexport const isArray = (obj) => {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\nexport const val = <T>(val: T | ((...args: any) => T), ...args): T => {\n  if (typeof val === 'function') {\n    return (val as any)(...args);\n  }\n  return val;\n};\nexport const swapItems = (array: any[], from: number, to: number) => {\n  const temp = array[from];\n  array[from] = array[to];\n  array[to] = temp;\n  return array;\n};\nexport const arraysEqual = (a?: any[], b?: any[]) => {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n  // Please note that calling sort on an array will modify that array.\n  // you might want to clone your array first.\n\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\n/* eslint-disable  */\n/* istanbul ignore next */\nexport const deepEquals = (a, b) => {\n  if (a === b) return true;\n  if (a && b && a.length !== b.length) return false;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!deepEquals(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!deepEquals(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n}\n\n/**\n * Generates a unique ID for a Cardboard tag.\n * If an `idNumber` is provided, it will return a string in the format `c_<idNumber>`.\n * If no `idNumber` is provided, it will generate a random UUID in the format `c_xxxxxxxxxx`.\n * \n * @returns A unique ID string for a Cardboard tag.\n */\nexport function generateUID(idNumber?: number): string {\n  if (!idNumber) return uuidv4();\n  return `c_${idNumber}`;\n}\n\nexport function uuidv4() {\n  return \"c_1000000010\".replace(/[018]/g, c =>\n    (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)\n  );\n}","import { removeFromList } from './util.js';\n\n/**\n * Single event listener/emitter, listen to, and trigger events. (for mapped events use {@link CMappedEvent}).\n *\n * @example\n * ```ts\n * const evt = new CEvent<bool>();\n * evt.listen(listener);\n * evt.dispatch(true);\n * evt.remove(listener);\n * ```\n */\nexport class CEvent<T> {\n  protected _lstrs: Array<(data: T | undefined) => void> = [];\n\n  listen(fn: (data?: T) => void) {\n    this._lstrs.push(fn);\n  }\n\n  remove(fn: (data?: T) => void) {\n    removeFromList(fn, this._lstrs);\n  }\n\n  dispatch(data?: T) {\n    this._lstrs.forEach((el) => el(data));\n  }\n\n  destroy() {\n    this._lstrs = [];\n  }\n}\n\n/**\n * Mapped event listener/emitter, listen to, and trigger events. (for single events use {@link CEvent}).\n *\n * @example\n * ```ts\n * const evt = new CMappedEvent<bool>();\n * evt.listen('evt', listener);\n * evt.dispatch('evt', true);\n * evt.remove('evt', listener);\n * ```\n */\n\nexport class CMappedEvent<T> {\n  private _lstrs: Record<string, Array<(data?: T) => void>> = {};\n\n  listen(evt: string, fn: (data?: T) => void) {\n    if (!(evt in this._lstrs)) {\n      this._lstrs[evt] = [fn];\n    }\n    else if (this._lstrs[evt]) {\n      this._lstrs[evt].push(fn);\n    }\n  }\n\n  remove(evt: string, fn: (data?: T) => void) {\n    removeFromList(fn, this._lstrs[evt]);\n  }\n\n  dispatch(evt: string, data?: T) {\n    if (evt in this._lstrs) {\n      this._lstrs[evt].forEach((el) => el(data));\n    }\n  }\n\n  destroy() {\n    this._lstrs = {};\n  }\n}\n\nexport const singleEvent = <T>() => {\n  return new CEvent<T>();\n};\n\nexport const mappedEvent = <T>() => {\n  return new CMappedEvent<T>();\n};\n","import { singleEvent, type CEvent } from \"./events.js\";\nimport { CTag } from \"./tag.js\";\nimport type { StyleManager } from \"./types.js\";\n\nexport type CardboardContext = {\n    intObs?: IntersectionObserver;\n    styleManager?: StyleManager;\n    mp?: CTag;\n    mpHistory: CTag[];\n    obs?: {\n        onAdded: CEvent<Node>;\n        onRemoved: CEvent<Node>;\n    };\n    init?: boolean;\n};\n\nexport const context: CardboardContext = {\n    mp: undefined,\n    mpHistory: [],\n    styleManager: undefined,\n    intObs: undefined,\n    obs: undefined,\n    init: false,\n};\n\nexport const isInitialized = () => context.init === true;\nexport const checkInitialized = () => {\n    if (!isInitialized()) {\n        throw new Error(\"Cardboard is not initialized. Please call `init()`, as some features will not work.\");\n    }\n};\n\n/**\n * Returns the current mountPoint {@link CTag}. See {@link mountPoint} for more information.\n */\nexport const getMountPoint = () => context.mp;\n\n/**\n * Makes the given tag the mount point. This means that when other tags are created with \"mountToParent\" or  (using `<tag_name>.mount()`, `tag('<tag_name>', [], true)`),\n * they will be added as children of this tag.\n * You can call mountPoint multiple times, and the last mount point tag will be used.\n * Then when you've finished, you can call {@link restoreMountPoint} to go back to the previously mounted tag if there is one.\n * You can clear all mount points using {@link clearMountPoints}.\n *\n * @example\n * ```ts\n * mountPoint(div()); // Div 1\n * div.mount();  // added as child of div\n * p.mount();    // added as child of div\n *\n * mountPoint(div()); // Div 2\n * div.mount();  // added as child of new div\n * p.mount();    // added as child of new div\n *\n * restoreMountPoint();      // Back to div 1\n * clearMountPoints();       // Clears all mount points, no mount point after this call\n * ```\n */\nexport const mountPoint = (tag: CTag) => {\n    if (context.mp) {\n        context.mpHistory.push(context.mp);\n    }\n    context.mp = tag;\n    return tag;\n};\n\n/**\n * Restore the currently mounted tag ({@link mountPoint}). \n * Goes back in the stack of mount points tags.\n * If there is no previous mount point tag, it will not do anything.\n */\nexport const restoreMountPoint = () => {\n    context.mp = context.mpHistory.pop();\n};\n\n/**\n * Restores all mount points. There will be no mount points tag after calling this function.\n */\nexport const clearMountPoints = () => {\n    context.mp = undefined;\n    context.mpHistory = [];\n};\n\n/**\n * Clears the mount point history and resets the mount point to the first one.\n * This means that the mount point will be the first tag that was mounted, \n * and all other mount points will be cleared.\n */\nexport const resetMountPoints = () => {\n    let first = context.mpHistory.shift();\n    context.mp = first;\n    context.mpHistory = [];\n};\n\nexport type ScopedCallback = (tag: CTag) => void;\n\n/**\n * Sets the mount point to the given tag, calls the scoped callback, and then restores the mount point.\n * Useful for creating a temporary mount point for a specific tag, and then restoring the previous mount point.\n * \n * @param tag \n * @param scopedCallback \n */\nexport const withMountPoint = (tag: CTag, scopedCallback: ScopedCallback) => {\n    mountPoint(tag);\n    scopedCallback(tag);\n    restoreMountPoint();\n}\n\n// TODO: Optimize this. Instead of observing everything, let lifecycles listen just to the parent of the element instead of everything.\nexport const createGlobalObserver = () => {\n    const _addedEvt = singleEvent<Node>();\n    const _removedEvt = singleEvent<Node>();\n\n    const observer = new window.MutationObserver((mutations, observer) => {\n        for (const mut of mutations) {\n            for (const n of Array.from(mut.addedNodes)) {\n                _addedEvt.dispatch(n);\n            }\n            for (const n of Array.from(mut.removedNodes)) {\n                _removedEvt.dispatch(n);\n            }\n        }\n    });\n\n    observer.observe(window.document.body, {\n        childList: true,\n        subtree: true,\n    });\n\n    return {\n        onAdded: _addedEvt,\n        onRemoved: _removedEvt,\n    };\n};","import { CEvent } from './events.js';\nimport { isArray, isObject } from './util.js';\nimport type { IObservable, IObservableOr, WithLength } from './types.js';\n\n/**\n * A class that holds a value and notifies whenever the value changes.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Observers\n */\nexport class Observable<T = any> extends CEvent<T> implements IObservable<T> {\n  private _value: T;\n  private readonly _destroyer?: () => void;\n\n  get value(): T {\n    return this._value;\n  }\n\n  /** Set the value, and dispatch to all listeners. */\n  set value(val: T) {\n    this.dispatch(val);\n  }\n\n  constructor(val: T, destroyer?: () => void) {\n    super();\n\n    if (val && (isObject(val) || isArray(val))) {\n      val = new Proxy((val as any), {\n        get(target, p, receiver) {\n          return target[p];\n        },\n        set: (target, p, newValue, receiver) => {\n          if (target[p] === newValue) return true;\n\n          target[p] = newValue;\n          super.dispatch(target);\n          return true;\n        },\n        deleteProperty: (target, p) => {\n          delete target[p];\n          super.dispatch(target);\n          return true;\n        },\n      });\n    }\n\n    this._value = val;\n    this._destroyer = destroyer;\n  }\n\n  valueOf() {\n    return this._value;\n  }\n\n  toString() {\n    return (this._value as any).toString();\n  }\n\n  /**\n   * Add a listener for when this Observable changes.\n   */\n  changed(callback: (val: T) => void) {\n    this.listen(callback);\n    return this;\n  }\n\n  /**\n  * Remove a listener for when this Observable changes.\n  */\n  remove(callback: (val: T) => void) {\n    super.remove(callback);\n    return this;\n  }\n\n  /**\n   * Set's the new value, and calls all the listeners.\n   * You can additionaly set the {@link value} directly.\n   */\n  dispatch(val: T) {\n    if (val === this._value) {\n      return this;\n    }\n    this._value = val;\n    super.dispatch(val);\n    return this;\n  }\n\n  destroy() {\n    if (this._destroyer) this._destroyer();\n    (this._value as any) = null;\n    super.destroy();\n  }\n\n  /**\n   * Creates a new {@link Observable} whose value is derived from another {@link Observable}.\n   * The new {@link Observable} automatically updates and notifies listeners whenever the source {@link Observable} changes.\n   *\n   * @example\n   * ```ts\n   * const value = createObservable(2);\n   * const isGreater = value.computed((value) => value > 5);\n   * // > isGreater == false;\n   * value.dispatch(6);\n   * // > isGreater == true;\n   * ```\n   */\n  computed = <K>(transform: (val: T) => K) => compute(this, transform);\n\n  /** @see {@link greaterThan} */\n  greaterThan = (val: IObservableOr<number> | number = 0) => greaterThan(this as any, val);\n  /** @see {@link greaterThanOr} */\n  greaterThanOr = (val: IObservableOr<number> = 0) => greaterThanOr(this as any, val);\n  /** @see {@link lessThan} */\n  lessThan = (val: IObservableOr<number> = 0) => lessThan(this as any, val);\n  /** @see {@link lessThanOr} */\n  lessThanOr = (val: IObservableOr<number> = 0) => lessThanOr(this as any, val);\n  /** @see {@link equalTo} */\n  equalTo = <K>(val: IObservableOr<K>) => equalTo(this as any, val);\n  /** @see {@link notEqualTo} */\n  notEqualTo = <K>(val: IObservableOr<K>) => notEqualTo(this as any, val);\n  /** @see {@link isEmpty} */\n  isEmpty = <K extends WithLength>() => isEmpty(this as any as IObservable<K>);\n  /** @see {@link notEmpty} */\n  notEmpty = <K extends WithLength>() => notEmpty(this as any as IObservable<K>);\n  /** @see {@link grab} */\n  grab = <K extends keyof T>(key: K, defaultVal?: T[K]) => grab(this as any, key, defaultVal);\n}\n\n/** \n * Check if a given object `obj` is a {@link Observable}  \n * * @param obj - The object to check.\n * @returns `true` if the object is an {@link Observable}, `false` otherwise\n */\nexport const isObservable = (obj: any) => {\n  return obj instanceof Observable;\n};\n\n/**\n * Create a new {@link Observable}  \n * > Consider using `state(...)` instead.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Observers\n * \n * @param val - The initial value of the observable.\n * @param destroyer - An optional function to call when the observable is destroyed.\n * @returns A new {@link Observable} instance.\n */\nexport const createObservable = <T>(val: T, destroyer?: () => void): IObservable<T> => {\n  return new Observable<T>(val, destroyer);\n};\n\n/**\n * Creates a new {@link Observable} whose value is derived from another {@link Observable}.\n * The new {@link Observable} automatically updates and notifies listeners whenever the source {@link Observable} changes.\n *\n * @param other - The source {@link Observable} to derive the value from.\n * @param transform - A function that takes the value of the source {@link Observable} and returns the derived value.\n * @return A new {@link Observable} that will contain the derived value.\n * \n * @example\n * ```ts\n * const value = createObservable(2);\n * // Create a derived observable that is true if value > 5\n * const isGreater = compute(value, (v) => v > 5);\n * // isGreater.value == false\n * value.dispatch(6);\n * // isGreater.value == true\n * ```\n */\nexport const compute = <T, K>(\n  other: IObservable<T>,\n  transform: (val: T) => K,\n): IObservable<K> => {\n  // eslint-disable-next-line prefer-const\n  let observable: IObservable<K> | null;\n\n  const cb = (val) => observable?.dispatch(transform(val));\n\n  observable = createObservable<K>(transform(other.value), () => {\n    // remove callback in other observable when destroyed\n    // remove references, free memory\n    other.remove(cb);\n    observable = null;\n    (other as any) = null;\n  });\n\n  other.changed(cb);\n\n  return observable as any;\n};\n\nexport type ExtractValue<T extends Array<IObservable<any>>> =\n  { [K in keyof T]: T[K] extends IObservable<infer V> ? V : never };\n\n/**\n * Computes a new {@link Observable} from multiple observables.\n * The new {@link Observable} will automatically update and notify listeners whenever any of the source observables change.\n * \n * @param observables - An array of source {@link Observable}s to derive the value from.\n * @param transform - A function that takes the values of the source observables and returns the derived value.\n * @returns A new {@link Observable} that will contain the derived value. \n */\nexport const computeMultiple = <T extends IObservable[], K>(\n  observables: [...T],\n  transform: (...v: [...ExtractValue<T>]) => K,\n): IObservable<K> => {\n  const cons = createObservable<K>(transform(...(observables.map(c => c.value) as any)));\n\n  for (const other of observables) {\n    other.changed(() => cons.dispatch(\n      transform(...(observables.map(c => c.value) as any))\n    ));\n  }\n  return cons as any;\n};\n\n/** Returns the value from an observable. Convenience method if you prefer it instead of `observable.value` */\nexport const getValue = <T>(val: IObservableOr<T>): T => {\n  return isObservable(val) ? (val as IObservable<T>).value : val as T;\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is greater than `val` */\nexport const greaterThan = (observable: IObservable<number>, val: IObservable<number> | number = 0) => {\n  return compute(observable, (newVal) => newVal > getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is greater than or equal `val` */\nexport const greaterThanOr = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal >= getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is less than `val` */\nexport const lessThan = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal < getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is less than or equal `val` */\nexport const lessThanOr = (observable: IObservable<number>, val: IObservableOr<number> = 0) => {\n  return compute(observable, (newVal) => newVal <= getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is equal to `val` */\nexport const equalTo = <T>(observable: IObservable<T>, val: IObservableOr<T>) => {\n  return compute(observable, (newVal) => newVal === getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT equal to `val` */\nexport const notEqualTo = <T>(observable: IObservable<T>, val: IObservableOr<T>) => {\n  return compute(observable, (newVal) => newVal !== getValue(val));\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT empty */\nexport const isEmpty = <T extends WithLength>(observable: IObservable<T>) => {\n  return compute(observable, (newVal) => newVal.length <= 0);\n};\n\n/** {@link compute} an observable and return a new {@link Observable} indicating if the value is NOT empty */\nexport const notEmpty = <T extends WithLength>(observable: IObservable<T>) => {\n  return compute(observable, (newVal) => newVal.length > 0);\n};\n\n/** {@link compute} an observable and return a new {@link Observable} that is equal to some property of the original {@link Observable} */\nexport const grab = <T, K extends keyof T>(observable: IObservable<T>, key: K, defaultVal?: T[K]) => {\n  return compute(observable, (newVal) => newVal ? (newVal[key] ? newVal[key] : defaultVal) : defaultVal);\n};\n\n","import type { IObservable, Primitive, TextObj } from './types.js';\nimport { isObservable } from './observables.js';\nimport { isObject } from './util.js';\n\n/**\n * Create a **TextNode** from text, and optionally reacts to a {@link IObservable}, interpolating the defined variables in the text each time the state changes.\n *\n * If you provide a {@link IObservable} as the second argument, the text will act as a template\n * and can reference properties in the state: `$count`, `$someValue`.\n *\n * When the state properties changes, the text node will be automatically updated with the new text.\n * Only the properties that are referenced in the template will be listened to.\n *\n * **NOTE** If you're not interpolating, and dont need to change the text, you can directly pass in a string ('string') instead of (`text('string')`).\n *\n * @see https://github.com/nombrekeff/cardboard-js/wiki/Managing-Text\n *\n * @example\n * ```ts\n * const st = state({ count: 0 });\n *\n * p(text('Raw text!'));\n * p(text(`Count: $count`, st));\n * ```\n */\nexport const text = <T extends Record<string, Primitive>, K extends TextObj>(textTemplate: string, obj?: IObservable<T> | K): Node => {\n  const node = document.createTextNode(''),\n    interpolatePattern = /\\B\\$([0-9]+|[a-z][a-z0-9_$]*)/gi;\n\n  if (!obj) {\n    node.nodeValue = textTemplate;\n    return node;\n  }\n\n  const updateNode = (data: Record<string, Primitive>) => {\n    node.nodeValue = !data\n      ? textTemplate\n      : textTemplate.replace(interpolatePattern, (m, g1) =>\n        (data[g1] ?? m).toString(),\n      );\n  };\n\n  if (isObservable(obj)) {\n    (obj as IObservable<Record<string, any>>).changed((val) => updateNode(val));\n    updateNode((obj as IObservable).value);\n  }\n  else if (isObject(obj)) {\n    for (const key of Object.getOwnPropertyNames(obj)) {\n      // We're just interested in listening to the obj that are references in the text.\n      if (textTemplate.includes(`$${key}`) && isObservable(obj[key])) {\n        obj[key].changed(() => updateNode(obj as any));\n      }\n    }\n\n    updateNode(obj as any);\n  }\n\n  return node;\n};\n","import type {\n  IObservable,\n  NestedStyleMap,\n  NoOp,\n  Primitive,\n  StyleMap,\n  TagChild,\n  TagChildren,\n  TagConfig,\n  TextObj,\n} from './types';\nimport { CssProperty } from './css-properties.js';\nimport { PickPropertyValues } from './css-property-values.js';\nimport { TagName } from './tag-names.js';\nimport { val, camelToDash, uuidv4 } from './util.js';\nimport { text } from './text.js';\nimport { createObservable, isObservable } from './observables.js';\nimport { CommonAttributes } from './attributes.js';\nimport { checkInitialized, context } from './context.js';\n\n\n/**\n * This is the main class in Cardboard. Even though Cardboard is designed to not need to use this class directly, you can if you want.\n *\n * CTag contains a reference to an HTMLElement, its parent, and provides a set of methods to interact with it.\n */\nexport class CTag {\n  /** Reference to the HTMLElement that this @type {CTag} represents */\n  el: HTMLElement & { remove: () => (Promise<boolean> | any) };\n\n\n  private _visible = false;\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(newValue: boolean) {\n    this._visible = newValue;\n    this.el.dispatchEvent(new CustomEvent('visible', {\n      detail: {\n        visible: newValue,\n        tag: this,\n      },\n      bubbles: true,\n      composed: true,\n    }));\n  }\n\n  /**\n   * Any function inside this array, will be called whenever the CTag is {@link destroy}ed\n   * Used to remove HTML Event Listeners and Observable listeners\n   * @hidden\n   */\n  private readonly _destroyers: NoOp[] = [];\n\n  /** @param parent Reference to the parent @type {CTag} of this element. */\n  private _parent?: CTag;\n\n  get parent(): CTag | undefined {\n    return this._parent;\n  }\n\n  set parent(newParent: CTag) {\n    this._parent = newParent;\n  }\n\n  /** Holds the list of all children, the ones that are currently in the DOM and those that are not. */\n  private _children: TagChild[] = [];\n\n  private _cachedChildren: Node[] = [];\n  get children() {\n    return this._getChildren(this.el);\n  }\n\n  private readonly _meta = {\n    isHidden: false,\n    nextSiblingID: null,\n  };\n\n  /**\n   * Gets the value of the `HTMLElement` that this CTag represents, if it has a value.\n   */\n  get value() {\n    return (this.el as any).value;\n  }\n\n  /**\n   * Sets the value of the `HTMLElement` that this CTag represents.\n   */\n  setValue(newValue?: string) {\n    (this.el as any).value = newValue;\n    return this;\n  }\n\n  /** \n   * Gets the checked state of the `HTMLElement` that this CTag represents, \n   * if it is a checkbox or radio button.\n   */\n  get checked() {\n    return (this.el as any).checked;\n  }\n\n  /** \n   * Sets the checked state of the element, if it is a checkbox or radio button.\n   */\n  setChecked(checked: boolean) {\n    (this.el as any).checked = checked;\n    return this;\n  }\n\n  /** \n   * Gets the style of the `HTMLElement` that this CTag represents.\n   */\n  get style() {\n    return this.el.style;\n  }\n\n  /** \n  * Gets the classname of the `HTMLElement` that this CTag represents.\n  */\n  get className() {\n    return this.el.className;\n  }\n\n  /** \n   * Gets the classlist of the `HTMLElement` that this CTag represents.\n   */\n  get classList() {\n    return this.el.classList;\n  }\n\n  /** Gets the value of the element and clears the value */\n  get consumeValue() {\n    const value = this.value;\n    this.clear();\n    return value;\n  }\n\n  /**\n   * Get's the id of the `HTMLElement` that this CTag represents.\n   */\n  get id() {\n    return this.el.id;\n  }\n\n  /**\n   * Set's the id of the `HTMLElement` that this CTag represents.\n   */\n  setId(id: string) {\n    this.el.id = id;\n    return this;\n  }\n\n  constructor(arg0: TagName | HTMLElement, children: TagChildren = [], mountToParent: boolean = false) {\n    const isSelector = typeof arg0 === 'string' && arg0.match(/\\(.+\\)/);\n\n    if (isSelector) {\n      const match = arg0.match(/\\(([\\.\\#]?[a-zA-Z][a-zA-Z0-9_$]+)\\)/);\n      const selector = match ? match[1] : null;\n      if (!selector) {\n        throw new Error(`'${arg0}' is not a valid selector`);\n      }\n\n      const element = document.querySelector(selector);\n\n      if (!element) {\n        throw new Error('Can\\'t find element for selector: ' + arg0);\n      }\n\n      this.el = element as HTMLElement;\n    }\n    else if (typeof arg0 === 'string') {\n      this.el = document.createElement(arg0);\n\n      if (context.mp && mountToParent) {\n        context.mp.append(this);\n      }\n    }\n    else if (arg0 instanceof HTMLElement) {\n      this.el = arg0;\n    }\n    else {\n      throw new Error('Invalid argument: ' + arg0);\n    }\n\n    if (children.length > 0) this.setChildren(children);\n\n    // Used by other parts of Cardboard to identify this tag\n    (this.el as any).tag = this;\n  }\n\n  /** \n   * Sets the children, removes previous children  \n   */\n  setChildren(children: TagChildren) {\n    this.el.replaceChildren(...this._mapChildren(children));\n    this._children = children;\n    return this;\n  }\n\n  // TODO: Consider if passing `children` as a single argument is better than spreading it.\n  /**\n   * Appends the given `children` to the element.\n   * \n   * @param {...TagChildren} children - The children to append to the element.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * @example\n   * ```ts\n   * const tag = new CTag('div');\n   * tag.append(\n   *   new CTag('span', ['Child 1']),\n   *   new CTag('span', ['Child 2']),\n   * );\n   * ```\n   */\n  append(...children: TagChildren) {\n    this.el.append(...this._mapChildren(children));\n    this._children.push(...children);\n    return this;\n  }\n\n  /**\n   * Prepends the given `children` to the element.\n   * \n   * @param {...TagChildren} children - The children to append to the element.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * @example\n   * ```ts\n   * const tag = new CTag('div');\n   * tag.prepend(\n   *   new CTag('span', ['Child 1']),\n   *   new CTag('span', ['Child 2']),\n   * );\n   * ```\n   */\n  prepend(...children: TagChildren) {\n    this.el.prepend(...this._mapChildren(children));\n    this._children.unshift(...children);\n    return this;\n  }\n\n  /**\n   * If the element is currently hidden it will add this element to the page wherever it's supposed to be.\n   * I will be placed exactly in the correct position, even if there are other elements hidden.\n   * **USE WITH CAUTION**: Not intended to be used in most cases.\n   * @hidden\n   */\n  async show() {\n    if (this.parent && !this.parent.children.includes(this.el)) {\n      const parentEl = this.parent.el;\n      // Get's the position of the element if all the children are visible\n      const expectedIndex = this.parent._children.indexOf(this);\n\n      // If the element should be the first child in the parent\n      if (expectedIndex === 0) {\n        parentEl.prepend(this.el);\n      }\n      // If the element should be the last child in the parent\n      else if (expectedIndex === this.parent._children.length - 1) {\n        parentEl.append(this.el);\n      }\n      // If the element should be the nth child in the parent\n      else {\n        // Calculate how many hidden children are before this element\n        let hiddenBefore = 0;\n        for (let i = expectedIndex - 1; i >= 0; i--) {\n          const child = this.parent._children[i];\n          if (child instanceof CTag && child._meta.isHidden) {\n            hiddenBefore++;\n          }\n        }\n\n        // Get the \"real\" children in the dom.\n        // The index takes into account the items that are hidden\n        const nextEl = parentEl.childNodes[expectedIndex - hiddenBefore];\n        parentEl.insertBefore(this.el, nextEl);\n      }\n    }\n    this._meta.isHidden = false;\n    return true;\n  }\n\n  /** \n   * Hide this element (removed from DOM) \n   * **USE WITH CAUTION**: Not intended to be used in most cases.\n   * @hidden\n   */\n  async hide() {\n    if (this.parent?.children.includes(this.el)) {\n      this.parent.el.insertBefore(document.createComment(this.el.id), this.el as any);\n      await this.remove();\n      this._meta.isHidden = true;\n    }\n  }\n\n  /** \n   * Whenever the `observable` changes, it will call the `callback`.\n   * This is helpful to react to changes in observables and update the tag accordingly.\n   * \n   * You can also do it directly, although you need to keep a reference to the tag yourself.\n   * \n   * @param observable - The observable to listen to.\n   * @param callback - The callback to call when the observable changes.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const disabled = createObservable(false);\n   * const tag = new CTag('div');\n   * tag.consume(disabled, (self, isDisabled) => {\n   *   console.log('New value:', isDisabled);\n   *   self.setDisabled(isDisabled);\n   * });\n   * ```\n   */\n  consume<T>(observable: IObservable<T>, callback: (self: CTag, newValue?: T) => void) {\n    if (observable.changed) {\n      const cb = (newValue) => callback(this, newValue);\n      observable.changed(cb);\n\n      this._destroyers.push(() => {\n        // Destroy reference to the observable, we don't need it anymore\n        observable.remove(cb);\n        (observable as any) = null;\n      });\n    }\n    else {\n      console.warn('An invalid Observable was supplied to `tag.consume`');\n    }\n\n    callback(this, ('value' in observable) ? observable.value : observable);\n    return this;\n  }\n\n  /**\n   * When the observable changes, it will call `ifTrue` when the observable is true. Or `ifFalse` when the observable is false.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link doIfNot}\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {function} ifTrue - The function to call when the observable is truey.\n   * @param {function} ifFalse - The function to call when the observable is falsey.\n   * @param {boolean} [invert=false] - If true, the condition will be inversed.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining.\n   */\n  doIf<T>(observable: IObservable<T>, ifTrue: (value?: T) => void, ifFalse: (value?: T) => void, invert = false) {\n    if (invert) {\n      const temp = ifTrue;\n      ifTrue = ifFalse;\n      ifFalse = temp;\n    }\n\n    const callback = (_, value) => {\n      // eslint-disable-next-line no-extra-boolean-cast\n      if (!!value) ifTrue(value);\n      else ifFalse(value);\n    };\n\n    return this.consume(observable, callback);\n  }\n\n  /**\n   * The oposite of {@link doIf}\n   * When the observable changes, it will call `ifTrue` if the observable is false. Or `ifFalse` if the observable is true.\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {function} ifTrue - The function to call when the observable is falsy.\n   * @param {function} ifFalse - The function to call when the observable is truthy.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   */\n  doIfNot<T>(observable: IObservable<T>, ifTrue: (value: T) => void, ifFalse: (value: T) => void) {\n    return this.doIf(observable, ifTrue, ifFalse, true);\n  }\n\n  /**\n   * Hide this element when the consumer is truthy. Updates whenever the observable changes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link hideIfNot}\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {boolean} [invert=false] - If true, the condition will be inversed.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const isHidden = createObservable(false);\n   * const tag = new CTag('div');\n   * tag.hideIf(isHidden); // Hides the tag when isHidden is true\n   * ```\n   */\n  hideIf<T>(observable: IObservable<T>, invert = false) {\n    const handleHide = (_, value: any) => {\n      const correctedValue = invert ? !value : !!value;\n      this._meta.isHidden = correctedValue;\n\n      if (!this.parent) return;\n      if (!correctedValue) void this.show();\n      else void this.hide();\n    };\n\n    return this.consume(observable, handleHide);\n  }\n\n  /** \n   * Hide this element when the `observable` is falsy. Updates whenever the `observable` changes. \n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const isVisible = createObservable(false);\n   * const tag = new CTag('div');\n   * tag.hideIfNot(isVisible); // Hides the tag when isVisible is false\n   * ```\n   */\n  hideIfNot<T>(observable: IObservable<T>) {\n    return this.hideIf(observable, true);\n  }\n\n  /**\n   * Adds classes to the element when the `observable` is truthy, and removes them when it is falsy.\n   * Updates whenever the `observable` changes.\n   * You can pass in an array of classes, or a function that returns a list of classes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link classIfNot}\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {string[] | ((self: CTag) => string[])} classes - The classes to add to the element. Can be an array of strings or a function that returns an array of strings.\n   * @param {boolean} [invert=false] - If true, the condition will be inversed.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const isActive = createObservable(true);\n   * const tag = new CTag('div');\n   * \n   * // Adds 'active' and 'highlighted' classes when isActive is true\n   * tag.classIf(isActive, ['active', 'highlighted']); \n   * ```\n   */\n  classIf<T>(observable: IObservable<T>, classes: string[] | ((self: CTag) => string[]), invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addClass(...val(classes, this)),\n      () => this.rmClass(...val(classes, this)),\n      invert,\n    );\n  }\n\n  /**\n   * Adds classes to the element when the `observable` is falsy, and removes them when it is truthy.\n   * Updates whenever the `observable` changes.\n   * You can pass in an array of classes, or a function that returns a list of classes.\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {string[] | ((self: CTag) => string[])} classes - The classes to add to the element. Can be an array of strings or a function that returns an array of strings.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   * \n   * @example\n   * ```ts\n   * const isActive = createObservable(true);\n   * const tag = new CTag('div');\n   * \n   * // Adds 'inactive' classes when isActive is false\n   * tag.classIfNot(isActive, ['inactive']); \n   * ```\n   */\n  classIfNot<T>(observable: IObservable<T>, classes: string[] | ((self: CTag) => string[])) {\n    return this.classIf(observable, classes, true);\n  }\n\n  /**\n   * Sets `text` when the consumer is true, and sets `elseText (default='')` when the consumer is false.\n   * Both `text` and `elseText` can be a string or a function that returns a string.\n   * Updates whenever the observable changes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link textIfNot}\n   * \n   * @param {IObservable} observable - The observable to listen to.\n   * @param {string | ((self: CTag) => string)} text - The text to set when the observable is truthy. Can be a string or a function that returns a string.\n   * @param {string | ((self: CTag) => string)} [elseText=''] - The text to set when the observable is falsy. Can be a string or a function that returns a string. Defaults to an empty string.\n   * @param {boolean} [invert=false] - If true, the condition will be inversed.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   */\n  textIf<T>(\n    observable: IObservable<T>,\n    text: string | ((self: CTag) => string),\n    elseText: string | ((self: CTag) => string) = '',\n    invert = false,\n  ) {\n    return this.doIf(\n      observable,\n      () => this.text(val(text, this)),\n      () => this.text(val(elseText, this)),\n      invert,\n    );\n  }\n\n  /**\n   * Sets text when the consumer is falsy, and sets `elseText (default='')` when the consumer is truthy.\n   * Both text and `elseText` can be a string or a function that returns a string.\n   * Updates whenever the observable changes.\n   */\n  textIfNot<T>(\n    observable: IObservable<T>,\n    text: string | ((self: CTag) => string),\n    elseText: string | ((self: CTag) => string) = '',\n  ) {\n    return this.textIf(observable, text, elseText, true);\n  }\n\n  /**\n   * Add attribute to the element when the consumer is truthy. Updates whenever the observable changes.\n   * `value` can be a string or a function that returns a string.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link attrIfNot}\n   */\n  attrIf<T>(observable: IObservable<T>, attr: CommonAttributes, value: string | ((self: CTag) => string) = '', invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addAttr(attr, val(value, this)),\n      () => this.rmAttr(attr),\n      invert,\n    );\n  }\n\n  /**\n   * Add attribute to the element when the consumer is falsy. Updates whenever the observable changes.\n   * `value` can be a string or a function that returns a string.\n   * If `invert` is set to true, the condition will be inversed\n   */\n  attrIfNot<T>(observable: IObservable<T>, attr: CommonAttributes, value: string | ((self: CTag) => string) = '') {\n    return this.attrIf(observable, attr, value, true);\n  }\n\n  /**\n   * Disable this element when the consumer is truthy. Updates whenever the observable changes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link disableIfNot}\n   */\n  disableIf<T>(observable: IObservable<T>, invert = false) {\n    return this.attrIf(observable, 'disabled', '', invert);\n  }\n\n  /** Disable this element when the consumer is falsy. Updates whenever the observable changes. */\n  disableIfNot<T>(observable: IObservable<T>) {\n    return this.disableIf(observable, true);\n  }\n\n  /**\n   * Add style to the element when the consumer is truthy. Updates whenever the observable changes.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link styleIfNot}\n   * `value` can be a string or a function that returns a string.\n   */\n  styleIf<T>(observable: IObservable<T>, style: string, value: string | ((self: CTag) => string) = '', invert = false) {\n    return this.doIf(\n      observable,\n      () => this.addStyle(style, val(value, this)),\n      () => this.rmStyle(style),\n      invert,\n    );\n  }\n\n  /**\n   * Add style to the element when the consumer is falsy. Updates whenever the observable changes.\n   * `value` can be a string or a function that returns a string.\n   */\n  styleIfNot<T>(observable: IObservable<T>, style: string, value: string | ((self: CTag) => string) = '') {\n    return this.styleIf(observable, style, value, true);\n  }\n\n  /**\n   * Add multiple styles to the element when the consumer is truthy. Updates whenever the observable changes.\n   * `styles` can be a {@link StyleMap} or a function that returns a {@link StyleMap}.\n   * If `invert` is set to true, the condition will be inversed, but you can also use {@link stylesIfNot}\n   */\n  stylesIf<T>(observable: IObservable<T>, styles: StyleMap | ((self: CTag) => StyleMap), invert = false) {\n    return this.doIf(\n      observable,\n      () => this.setStyle(val(styles, this)),\n      () => this.rmStyle(...Object.keys(styles)),\n      invert,\n    );\n  }\n\n  /**\n   * Add multiple styles to the element when the consumer is falsy. Updates whenever the observable changes.\n   * `styles` can be a {@link StyleMap} or a function that returns a {@link StyleMap}.\n   * For the oposite use  {@link stylesIf}\n   */\n  stylesIfNot<T>(observable: IObservable<T>, styles: StyleMap | ((self: CTag) => StyleMap)) {\n    return this.stylesIf(observable, styles, true);\n  }\n\n  /**\n   * Adds a `stylesheet` to main style manager, and adds the `className` to the element.\n   * This is useful for adding styles to the element that are not inline styles.\n   * By doing this we can have just one style definition for tags that will have the same styles.\n   * \n   * @see https://github.com/nombrekeff/cardboard-js/wiki/Styling#6-advanced-styling-child-elements\n   * \n   * @param {NestedStyleMap} stylesheet - The stylesheet to add to the style manager.\n   * @param {string} [className] - The class name to add to the element. If not provided, a random UUID will be generated.\n   * @return {CTag} - The current CTag instance, allowing for method chaining.\n   */\n  styled(stylesheet: NestedStyleMap | undefined, className?: string): this {\n    // TODO(nombrekeff): sanitizing className might be a good idea\n    className ??= uuidv4();\n\n    if (stylesheet) {\n      context.styleManager?.add({\n        [`.${className}`]: stylesheet,\n      });\n    }\n\n    return this.addClass(className);\n  }\n\n  /**\n   * If {textTemplate} is provided, it sets the `textContent` of the element.\n   * If {textTemplate} is provided, and a state is provided. It will use the {textTemplate} as a template,\n   * that will be interpolated with the values in the state, each time the state changes. It acts like {@link text}\n   *\n   * If no argument is provided, it returns the `textContent` of the element.\n   * @see https://github.com/nombrekeff/cardboard-js/wiki/Managing-Text\n   */\n  text<T extends Record<string, Primitive>, K extends TextObj, J extends string>(textTemplate?: string, obj?: IObservable<T> | K): J extends string ? CTag : string {\n    if (textTemplate == null) {\n      return this.el.textContent as any;\n    }\n\n    if (obj && textTemplate) {\n      return this.setChildren([text(textTemplate, obj)]) as any;\n    }\n\n    this.el.textContent = textTemplate;\n\n    return this as any;\n  }\n\n  /**\n   * Configure the element in a single call by passing @param {TagConfig} c\n   * instead of having to call a method for each property you want to change\n   * \n   * @param {TagConfig} c - The configuration object containing properties to set on the element.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining\n   * \n   * @example\n   * ```ts\n   * const tag = new CTag('div');\n   * tag.config({\n   *   attr: { id: 'my-div', 'data-custom': 'value' },\n   *   classList: ['class1', 'class2'],\n   *   className: 'my-class',\n   *   style: { color: 'red', backgroundColor: 'blue' },\n   *   text: 'Hello World',\n   *   value: 'Initial Value',\n   *   children: [new CTag('span', ['Child Text'])],\n   *   on: {\n   *     click: (self, evt) => console.log('Clicked!', self),\n   *   },\n   * });\n   * ```\n   */\n  config(c: TagConfig) {\n    if (c.attr) this.setAttrs(c.attr);\n    if (c.classList) this.addClass(...c.classList);\n    if (c.className) this.setClassName(c.className);\n    if (c.style) this.setStyle(c.style);\n    if (c.text) this.text(c.text);\n    if (c.value) this.setValue(c.value);\n    if (c.children) this.append(...c.children);\n    if (c.on) {\n      for (const key of Object.keys(c.on)) {\n        this.on(key, c.on[key]);\n      }\n    }\n\n    return this;\n  }\n\n  /** \n   * Add classes to the elements class list.\n   * \n   * @param {...string} classes - The classes to add to the element's class list.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining\n   * \n   * @example\n   * ```ts\n   * const tag = new CTag('div');\n   * tag.addClass('class1', 'class2');\n   * ```\n   */\n  addClass(...classes: string[]) {\n    this.classList.add(...classes);\n    return this;\n  }\n\n  /** Set the elements class name */\n  setClassName(className: string) {\n    this.el.className = className;\n    return this;\n  }\n\n  /** Remove classes from class list */\n  rmClass(...classes: string[]) {\n    for (const key of classes) {\n      this.classList.remove(key);\n    }\n    return this;\n  }\n\n  /** Check if classes are present in this element */\n  hasClass(...classes: string[]) {\n    for (const key of classes) {\n      if (!this.classList.contains(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Replace a class with another */\n  replaceClass(targetClass: string, replaceClass: string) {\n    this.classList.replace(targetClass, replaceClass);\n    return this;\n  }\n\n  /** Toggle a class. If it's present it's removed, if it's not present its added. */\n  toggleClass(targetClass: string): CTag {\n    return this.hasClass(targetClass) ? this.rmClass(targetClass) : this.addClass(targetClass);\n  }\n\n  /** Add a single style */\n  addStyle<K extends CssProperty>(property: K, value: PickPropertyValues<K>) {\n    this.el.style[property as string] = value;\n    return this;\n  }\n\n  /** Set multiple styles at once */\n  setStyle(styles: StyleMap) {\n    for (const key in styles) {\n      this.addStyle(key, styles[key] ?? '');\n    }\n    return this;\n  }\n\n  /** Remove styles */\n  rmStyle(...styleNames: string[]) {\n    for (const key of styleNames) {\n      this.style.removeProperty(camelToDash(key));\n    }\n    return this;\n  }\n\n  /** Check if this element has styles */\n  hasStyle(...styles: CssProperty[]) {\n    for (const key of styles) {\n      if (!this.style.getPropertyValue(camelToDash(key))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Adds a set of attributes to the element */\n  setAttrs(attrs: Record<string, string | undefined>) {\n    for (const key in attrs) {\n      this.addAttr(key, attrs[key]);\n    }\n    return this;\n  }\n\n  /** Adds a single attribute to the element */\n  addAttr(key: CommonAttributes, value: string = '') {\n    this.el.attributes[key as string] = value;\n    this.el.setAttribute(key, value);\n    return this;\n  }\n\n  /** Remove attributes from the element */\n  rmAttr(...attrs: CommonAttributes[]) {\n    for (const key of attrs) {\n      this.el.removeAttribute(key);\n      delete this.el.attributes[key];\n    }\n    return this;\n  }\n\n  /** Check if this element has attributes */\n  hasAttr(...attr: CommonAttributes[]) {\n    for (const key of attr) {\n      if (!(key in this.el.attributes)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** Get an attributes value */\n  getAttr(attr: CommonAttributes) {\n    return this.el.attributes[attr];\n  }\n\n  // TODO: Might be a good idea to return the listener so it can be removed later\n  /**\n   * Listen to an event on the element. Like addEventListener.\n   */\n  listen<K extends keyof HTMLElementEventMap>(\n    tag: CTag,\n    evt: K,\n    consumer: (self: CTag, other: CTag, evt: HTMLElementEventMap[K]) => void,\n  ) {\n    return tag.on(evt, (other, evt) => {\n      consumer(this, other, evt);\n    });\n  }\n\n  /**\n   * Returns a {@link IObservable} that fires when the Event `evtName` is fired in this element\n   * The return value of `fn` will be passed to the listeners of the {@link IObservable}\n   * \n   * @param {K} evtName - The name of the event to listen for. For a list of valid event names, see {@link HTMLElementEventMap \"available event names\"}.\n   * @param {fn} fn - The callback function to execute when the event is triggered.\n   * @returns {IObservable<any>} - An observable that emits the return value of the callback function when the event is triggered.\n   */\n  when<K extends keyof HTMLElementEventMap>(\n    evtName: K | string,\n    fn: (self: CTag, evt: HTMLElementEventMap[K]) => any,\n  ): IObservable<any> {\n    const cons = createObservable<any>({});\n    this.on(evtName, (t, evt) => {\n      cons.dispatch(fn(t, evt));\n    });\n    return cons;\n  }\n\n  // TODO: Might be a good idea to return the listener so it can be removed later\n  /** \n   * Add an event listener for a particular HTMLElement event \n   * \n   * @param {K} evtName - The name of the event to listen for. For a list of valid event names, see {@link HTMLElementEventMap \"available event names\"}.\n   * @param {fn} fn - The callback function to execute when the event is triggered.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining\n   */\n  on<K extends keyof HTMLElementEventMap>(\n    evtName: K | string,\n    fn: (tag: CTag, evt: HTMLElementEventMap[K]) => void\n  ): CTag {\n    if (fn) {\n      const cb = (evt: any) => fn(this, evt);\n      this.el.addEventListener(evtName, cb);\n      this._destroyers.push(() => {\n        this.el.removeEventListener(evtName, cb);\n      });\n    }\n    return this;\n  }\n\n  /** \n   * Add an event listener for a particular event that will only fire once\n   * @param {K} evtName - The name of the event to listen for. For a list of valid event names, see {@link HTMLElementEventMap \"available event names\"}.\n   * @param {fn} fn - The callback function to execute when the event is triggered.\n   * @returns {CTag} - The current CTag instance, allowing for method chaining\n   */\n  once<K extends keyof HTMLElementEventMap>(\n    evtName: K & string,\n    fn: (tag: CTag, evt: HTMLElementEventMap[K]) => void\n  ): CTag {\n    const listener = (evt) => {\n      fn(this, evt);\n      this.el.removeEventListener(evtName, listener);\n    };\n    this.el.addEventListener(evtName, listener);\n    return this;\n  }\n\n  // TODO: nombrekeff: maybe remove these convenience methods. Would free some space in the bundle\n  /** Add a **click** event listener */\n  clicked(fn: (tag: CTag, evt: MouseEvent) => void): CTag {\n    return this.on('click', fn);\n  }\n\n  /** Add a **keypress** event listener */\n  keyPressed(fn: (tag: CTag, evt: KeyboardEvent) => void, key?: string): CTag {\n    if (key) {\n      return this.on('keypress', (_, evt) => {\n        if (evt.code === key || evt.key === key) {\n          fn(this, evt);\n        }\n      });\n    }\n\n    return this.on('keypress', fn);\n  }\n\n  /** Add a **change** event listener */\n  changed(fn: (tag: CTag, evt: Event) => void): CTag {\n    return this.on('change', fn);\n  }\n\n  /** Add a **submit** event listener */\n  submited(fn: (tag: CTag, evt: SubmitEvent) => void): CTag {\n    return this.on('submit', fn);\n  }\n\n  /**\n   * Remove element from the DOM, but keep data as is. Can then be added again.\n   * To fully remove the element use {@link destroy}\n   * \n   * **USE WITH CAUTION!** Not intended to be used in most cases.\n   */\n  async remove(): Promise<CTag> {\n    // Might be a promise (it's overriden by `withLifecycle`)\n    const result: any = this.el.remove();\n    if (result instanceof Promise) {\n      await result;\n    }\n\n    await (this.el as any).remove();\n    return this;\n  }\n\n  /**\n   * Destroy the element, should not be used afterwards\n   * \n   * **USE WITH CAUTION!** Not intended to be used in most cases.\n   */\n  destroy(): void {\n    context.intObs?.unobserve(this.el);\n    this._children.forEach((cl) => {\n      if (cl instanceof CTag) {\n        cl.destroy();\n      }\n    });\n\n    this._destroyers.forEach(listener => listener());\n    this._children = [];\n    this._cachedChildren = [];\n    void this.remove();\n  }\n\n  /**\n   * Clears the `value` of the element. If you are getting the value and then clearing, consider using {@link consumeValue}\n   */\n  clear(): CTag {\n    (this.el as any).value = '';\n    // Trigger input event, so clearing is treated as input!\n    this.el.dispatchEvent(new InputEvent('input'));\n    return this;\n  }\n\n  /** Disable the element */\n  disable(): CTag {\n    return this.setDisabled(true);\n  }\n\n  /** Enable the element */\n  enable(): CTag {\n    return this.setDisabled(false);\n  }\n\n  /** \n   * Set whether the element should be disabled or not. It sets the `disabled` attribute.\n   */\n  setDisabled(disabled: boolean): CTag {\n    return disabled ? this.addAttr('disabled') : this.rmAttr('disabled');\n  }\n\n  /** \n   * Query a child in this element (in the DOM)\n   * \n   * @param {string} selector - The CSS selector to query the child element.\n   * @returns {CTag | undefined} - Returns a CTag instance if the element is found, or undefined if not found.\n   * \n   * @example\n   * ```ts\n   * const childTag = parentTag.q('.child-class');\n   * ```\n   */\n  q(selector): CTag | undefined {\n    const element = this.el.querySelector(selector);\n    if (element) return new CTag(element);\n  }\n\n  /** \n   * Find a child in this element (in the DOM or NOT)\n   * @param {function} predicate - A function that takes a TagChild and returns true if it matches the condition.\n   * @returns {TagChild | undefined} - Returns the first TagChild that matches the predicate, or undefined if no match is found.\n   */\n  find(predicate: (el: TagChild) => boolean): TagChild | undefined {\n    for (const child of this._children) {\n      if (predicate(child)) {\n        return child;\n      }\n    }\n  }\n\n  /**\n   * Find a CTag child in this element (in the DOM or NOT)\n   * @param {function} predicate - A function that takes a CTag and returns true if it matches the condition.\n   * @returns {CTag | undefined} - Returns the first CTag that matches the predicate, or undefined if no match is found.\n   */\n  findTag(predicate: (el: CTag) => boolean): CTag | undefined {\n    for (const child of this._children) {\n      if (child instanceof CTag && predicate(child)) {\n        return child;\n      }\n    }\n  }\n\n\n  private _childrenFilterPredicate(item) {\n    if (item instanceof CTag && item._meta.isHidden) {\n      return false;\n    }\n    return true;\n  }\n\n\n  private _getElementForChild(cl: TagChild): Node | null {\n    if (typeof cl === 'string') return document.createTextNode(cl);\n    if (isObservable(cl)) {\n      return text('$val', { val: (cl as IObservable) });\n    }\n    if (cl instanceof CTag) return cl.el;\n    if (cl instanceof Node) return cl;\n    return null;\n  }\n\n  // Update cached child nodes whenever this elements childs change\n  // This makes it a lot faster to get children.\n  // If the children have not changed, there's no need to set the children, use the previous ones\n\n  private _observer: MutationObserver;\n\n  private _getChildren(element: HTMLElement) {\n    if (!this._observer) {\n      this._observer = new window.MutationObserver(() => {\n        this._cacheChildren(element);\n      });\n      this._observer.observe(this.el, { childList: true });\n      this._cacheChildren(element);\n    }\n    return this._cachedChildren;\n  }\n\n\n  private _cacheChildren(element: HTMLElement) {\n    const nodes = element.childNodes,\n      children: Node[] = [];\n    let i = nodes.length;\n\n    while (i--) {\n      if (nodes[i].nodeType === 1) {\n        children.unshift(nodes[i]);\n      }\n    }\n\n    this._cachedChildren = children;\n  }\n\n\n  private _mapChildren(children: TagChildren): Node[] {\n    const mapped: Node[] = [];\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      // for (const child of children) {\n      if (child instanceof CTag) {\n        child.parent = this;\n      }\n\n      if (this._childrenFilterPredicate(child)) {\n        const element = this._getElementForChild(child);\n        if (element != null) mapped.push(element);\n      }\n    }\n    return mapped;\n  }\n}\n\n/**\n * This function can do the following based on the first argument:\n * * create a tag if you provide a tag name: (`div`, `abbr`, `custom-tag`, ...),\n * * wrap around an existing element in the page if you pass in a selector: (`'(body)'`, `'(#id)'`, `'(.class)'`), any selector is allowed.\n * * wrap around an element passed in\n *\n * Then it can receive a list of children to be added.\n * Receives a third argument for mounting this tag to the currently mounted tag ({@link context.mp}).\n *\n * @example\n * ```ts\n * tag('div');\n * tag('(body)');\n * tag('(.someclass)');\n * tag(document.querySelector('#something'));\n * ```\n */\nexport const tag = (arg0: string | HTMLElement, children: TagChildren = [], mountToParent: boolean = false) => {\n  checkInitialized();\n  return new CTag(arg0, children, mountToParent);\n};\n","import type { NestedStyleMap } from './types';\nimport { camelToDash, isObject } from './util.js';\n\nexport const genCss = (\n  styleSheet:\n    | Record<string, NestedStyleMap>\n    | Array<Record<string, NestedStyleMap>>,\n) => {\n  const stylesheets = styleSheet instanceof Array ? styleSheet : [styleSheet];\n  let generatedCss = '';\n\n  for (const sheet of stylesheets) {\n    for (const key in sheet) {\n      generatedCss += genBlock(key, sheet[key]);\n    }\n  }\n  return generatedCss;\n};\n\nexport const genBlock = (selector: string, style: NestedStyleMap): string => {\n  return genBlockContent(selector, style).join('');\n};\n\nexport const genBlockContent = (\n  selector: string,\n  style: NestedStyleMap,\n): string[] => {\n  let inside = '';\n  const blocks: string[] = [];\n\n  for (const key in style) {\n    if (isObject(style[key])) {\n      let newSelector = selector;\n\n      newSelector += key;\n\n      blocks.push(...genBlockContent(newSelector, style[key] as NestedStyleMap));\n    }\n    else if (style[key]) {\n      inside += `${camelToDash(key)}:${style[key] as string};`;\n    }\n  }\n\n  blocks.unshift(`${selector}{${inside}}`);\n\n  return blocks;\n};\n","import { genCss } from \"./css-generator.js\";\nimport { tag, CTag } from \"./tag.js\";\nimport { NestedStyleMap } from \"./types.js\";\n\nconst STYLE_TAG_ID = 'cardboard-styles';\n\nexport class StyleManager {\n    styleTag: CTag;\n    rules: Set<string>;\n\n    generatedIdsCount: number = 0;\n\n    constructor() {\n        this.rules = new Set();\n        let styleTag: CTag | null = null;\n\n        try {\n            styleTag = tag(`(#${STYLE_TAG_ID})`);\n        } catch (error) {\n            styleTag = tag('style').setId(STYLE_TAG_ID);\n        }\n\n        tag('(head)').append(styleTag);\n\n        this.styleTag = styleTag;\n    }\n\n    public add(styleSheet: Record<string, NestedStyleMap> | Array<Record<string, NestedStyleMap>>) {\n        const css = genCss(styleSheet);\n\n        if (!this.rules.has(css)) {\n            this.rules.add(css);\n            this.styleTag.append(css);\n        }\n    }\n}\n","import type { IObservable, State } from './types';\nimport { createObservable, getValue } from './observables.js';\n\n/**\n * `state` creates a reactive value that can the be used with tags to create dinamic and reactive apps.\n *\n * @see https://github.com/nombrekeff/cardboard-js/wiki/State\n *\n * @example\n * ```ts\n * const count = state(0);\n * count.changed(() => { ... });\n * count.dispatch(2);\n * count.value++;\n *\n * div().hideIf(count);\n * div().disableIf(count);\n * div(template('Count is: $count', { count: count }));\n * ```\n */\nexport const state = <T>(initialValue: T): State<T> => {\n  return createObservable(initialValue);\n};\n\n/**\n * `listState` creates a reactive list of values that can be used with tags to manage dynamic and reactive apps.\n * It wraps each item with a {@link State} (aka. {@link IObservable}) to allow for individual item reactivity.\n * @see https://github.com/nombrekeff/cardboard-js/wiki/ListState\n *\n * @example\n * ```javascript\n * const myList = listState([1, 2, 3]);\n *\n * myList.add(4);\n * myList.addAt(0, 0);\n * myList.remove(2);\n * myList.removeWhere(item => item === 3);\n * const listValues = myList.listValue;\n * const listLength = myList.length;\n *\n * // Listen to changes in the list\n * myList.list.changed(() => {\n *   // List has changed\n * });\n * ```\n */\nexport const listState = <T>(initialData: T[]) => {\n  const _list = state<Array<State<T>>>(\n    initialData.map((d) => createObservable(d)),\n  );\n\n  const add = (item: T) => {\n    stateAdd(_list, createObservable(item));\n  };\n\n  const addAt = (item: T, index: number) => {\n    stateAddAt(_list, createObservable(item), index);\n  };\n\n  return {\n    /**\n     * The reactive list of items.\n     * Each item is wrapped in a {@link State} to allow for individual reactivity.\n     */\n    get list() {\n      return _list;\n    },\n    /**\n     * The raw list of items.\n     */\n    get listValue() {\n      return _list.value;\n    },\n    add,\n    addAt,\n    remove: stateRemove.bind({}, _list),\n    removeWhere: stateRemoveWhere.bind({}, _list),\n    length: _list.computed((_list) => _list.length),\n  };\n};\n/**\n * `stateAdd` adds an item to a reactive list.\n * It creates a new array with the existing items and the new item, then updates the state.\n * \n * @example\n * ```typescript\n * const myList = state([]);\n * stateAdd(myList, 'new item');\n * ```\n */\nexport const stateAdd = <T>(state: State<T[]>, item: T) => {\n  state.value = [...state.value, item];\n};\n\n/**\n * `stateAddAt` adds an item to a reactive list at a specific index.\n * It creates a new array with the existing items and the new item at the specified index, then updates the state.\n * \n * @example\n * ```typescript\n * const myList = state([]);\n * stateAddAt(myList, 'new item', 0);\n * ```\n */\nexport const stateAddAt = <T>(state: State<T[]>, item: T, index: number) => {\n  let newData: any = [...state.value];\n  newData.splice(index, 0, item);\n  state.value = newData;\n  newData = [];\n};\n\n/**\n * `stateRemoveWhere` removes items from a reactive list based on a callback function.\n * It filters the list and updates the state with the remaining items.\n * \n * @example\n * ```typescript\n * const myList = state([1, 2, 3, 4]);\n * stateRemoveWhere(myList, (item) => item % 2 === 0); // Removes even numbers\n * ```\n */\nexport const stateRemoveWhere = <T>(state: State<T[]>, cb: (item: T, index: number) => boolean) => {\n  state.value = state.value.filter((el, i) => !cb(el, i));\n};\n\n/**\n * `stateRemove` removes a specific item from a reactive list.\n * It finds the index of the item in the list and calls `stateRemoveWhere` to remove it.\n * \n * @example\n * ```typescript\n * const myList = state([1, 2, 3, 4]);\n * stateRemove(myList, 2); // Removes the item with value 2\n * ```\n */\nexport const stateRemove = <T>(state: State<T[]>, item: T) => {\n  const index = state.value.findIndex(state => getValue(state) === getValue(item));\n  stateRemoveWhere(state, (_, i) => {\n    return index === i;\n  });\n};\n","import { isObservable } from './observables.js';\nimport { deepEquals } from './util.js';\nimport type { CTag } from './tag.js';\nimport type { IObservable, IObservableOr } from './types.js';\n\n/**\n * @enum {string}\n * @property {string} unchanged - The entry is unchanged.\n * @property {string} added - The entry was added.  \n * @property {string} removed - The entry was removed.\n * @property {string} swap - The entry was swapped with another entry.\n */\nexport enum DiffState {\n  unchanged = 'unchanged',\n  added = 'added',\n  removed = 'removed',\n  swap = 'swap',\n}\n\n/**\n * Represents a single entry in the diff process.\n * This interface is used to describe the state of an entry in the diff process,\n * including its index, the entry itself, and optionally the target entry and target index if it was swapped.\n * @property {DiffState} state - The state of the entry in the diff process.\n * @property {number} index - The index of the entry in the old data.\n * @property {T} entry - The entry itself.\n * @property {T} targetEntry - The target entry if the entry was swapped\n * @property {number} targetIndex - The index of the target entry if the entry was swapped.\n */\nexport interface DiffEntry<T = unknown> {\n  state: DiffState,\n  index: number,\n  entry: T,\n  targetEntry?: T;\n  targetIndex?: number,\n}\n\n/**\n * Render a {@link CTag} for each item in the provided list.\n *\n * `each` can work with a goold old array, or with a {@link IObservable}.\n * If you provide a `Observable`, the list will update whenever the `Observable` changes.\n *\n * @param observable - An array or an {@link IObservable} that contains the list of items to render.\n * @param builder - A function that takes an item from the list and returns a {@link CTag} to render.\n * @param key - An optional function that returns a unique key for each item in the list. This is used to optimize the rendering process.\n * \n * @see https://github.com/nombrekeff/cardboard-js/wiki/Logic\n *\n * @example\n * Static list\n * ```ts\n * const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n * div(\n *     each(colors, (color) =>\n *        button(color).addStyle('color', color)\n *     )\n * );\n * ```\n *\n * @example\n * Dynamic list\n * ```ts\n *  const colors = state(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']);\n *  const selectedColor = state('red');\n *  div(\n *    each(colors, (color) =>\n *        button(color)\n *         .addStyle('color', color)\n *         .stylesIf(equalTo(selectedColor, color), { fontWeight: 'bold' });\n *    )\n *  );\n * ```\n */\nexport function each<T>(\n  observable: IObservableOr<T[]>,\n  builder: (val: T) => CTag,\n  key?: (val: T) => any,\n): Node {\n  const node = document.createTextNode(''), elements: CTag[] = [];\n  let oldData: T[] = [],\n    nodeParentIndex: number = 0,\n    elementsCopy: CTag[] = [];\n\n  // Inserts a new element into the DOM and the elements array at the specified index.\n  // Uses the transform function to create the element and places it before the next sibling or anchor node.\n  const actionAdd = (entry: DiffEntry<T>) => {\n    if (entry.index >= 0) {\n      const el = builder(entry.entry);\n      const elAt = elements[entry.index];\n      elements.splice(entry.index, 0, el);\n      node.parentElement?.insertBefore(el.el, elAt ? elAt.el : node);\n    }\n  };\n\n  // Removes the element at the specified index from the DOM and calls its destroy method.\n  // Also removes the element from the internal elements array to keep it in sync.\n  const actionRemove = (entry: DiffEntry<T>) => {\n    node.parentElement?.removeChild(elementsCopy[entry.index].el);\n    elementsCopy[entry.index].destroy();\n\n    // This is done because if we use the original index, and the array changes size,\n    // the indexes will not match\n    const i = elements.indexOf(elementsCopy[entry.index]);\n    elements.splice(i, 1);\n  };\n\n  // Swaps two elements in the DOM and updates their positions in the internal arrays.\n  // Ensures the visual order matches the new data order after a swap operation.\n  const actionSwap = (entry: DiffEntry<T>) => {\n    const fromIndex = entry.index,\n      toIndex = entry.targetIndex ?? 0;\n\n    if (fromIndex >= 0 && toIndex >= 0) {\n      const elementFrom = elementsCopy[fromIndex];\n      const elementTo = elementsCopy[toIndex];\n\n      const parentNode = elementFrom.el.parentNode;\n      const nextSiblingNode = elementFrom.el.nextSibling;\n\n      if (parentNode && nextSiblingNode === elementTo.el) {\n        parentNode.insertBefore(elementTo.el, elementFrom.el);\n      }\n      else if (elementTo.el.parentNode) {\n        elementTo.el.parentNode.insertBefore(elementFrom.el, elementTo.el);\n\n        if (nextSiblingNode && parentNode) {\n          parentNode.insertBefore(elementTo.el, nextSiblingNode);\n        }\n        else if (parentNode) {\n          parentNode.appendChild(elementTo.el);\n        }\n      }\n\n      const tempCopy = elementsCopy[fromIndex];\n      elementsCopy[fromIndex] = elementsCopy[toIndex];\n      elementsCopy[toIndex] = tempCopy;\n\n      const temp = elements[fromIndex];\n      elements[fromIndex] = elements[toIndex];\n      elements[toIndex] = temp;\n    }\n  };\n\n  // Map of actions to perform based on the diff state\n  // This is used to avoid using a switch statement, which is slower\n  // and to keep the code cleaner.\n  const actionMap = {\n    [DiffState.added]: actionAdd,\n    [DiffState.removed]: actionRemove,\n    [DiffState.swap]: actionSwap,\n  };\n\n  // Maximum number of tries to find the parent element\n  // This is used to avoid infinite loops in case the parent element is not found\n  const MAX_UPDATE_TRIES = 100;\n\n  // This function updates the list of elements based on the new data.\n  // It calculates the differences between the old and new data using `diffList`,\n  // and applies the necessary actions to the DOM.\n  const updateList = (newData: T[], tries = 0) => {\n    // If the node has no parent element, it means it has not been mounted yet,\n    // so we wait a bit and try again.\n    if (!node.parentElement) {\n      // If we have not reached the max tries, we wait a bit and try again\n      if (tries < MAX_UPDATE_TRIES) {\n        setTimeout(() => updateList(newData, tries + 1), 1);\n      } else {\n        console.warn(`[each]: parentElement not found after max retries`);\n      }\n      return;\n    }\n\n    if (!nodeParentIndex) {\n      const children = Array.from(node.parentElement?.childNodes ?? []);\n      nodeParentIndex = children.indexOf(node);\n    }\n\n    // Create the diff between the new data and the old data\n    const diff = diffList(newData, oldData, key);\n\n    // If the diff is empty, it means the data has not changed, so we do nothing\n    if (diff.length <= 0) return;\n\n    // Process the diff and apply the actions\n    for (let index = 0; index < diff.length; index++) {\n      const data = diff[index];\n      const nextIndex = diff[index + 1] ? diff[index + 1].index : null;\n      const nextState = diff[index + 1] ? diff[index + 1].state : null;\n      actionMap[data.state](data);\n      if (nextState === DiffState.swap && nextIndex === data.targetIndex) {\n        index++;\n      }\n    }\n\n    // Set the new data as the old data for the next update\n    oldData = [...newData].slice(0);\n\n    // Update the elementsCopy to match the new data\n    elementsCopy = elements.slice(0);\n  };\n\n  updateList('value' in observable ? observable.value : observable);\n\n  if (isObservable(observable)) {\n    (observable as IObservable).changed(updateList);\n  }\n\n  return node;\n}\n\n/**\n * Compares 2 lists, returns an array of {@link DiffEntry} with the operations needed to make in the `oldData` to create the new list.\n * It only returns the actions that are needed, if an element does not need to move, then it's not returned\n * \n * @param newData - The new data to compare against the old data.\n * @param oldData - The old data to compare against the new data.\n * @param key - A function that returns a unique key for each item in the list. This is used to optimize the rendering process.\n * @returns An array of {@link DiffEntry} objects that describe the differences between the two lists.\n */\nexport function diffList<T>(\n  newData: T[], oldData: T[],\n  key: (item: T) => any = (item: T) => item\n): Array<DiffEntry<T>> {\n  const diff: Array<DiffEntry<T>> = [],\n    newLength = newData.length,\n    oldLength = oldData.length;\n\n  // If the data is the same, don't do anything\n  if (newLength === oldLength && (newData == oldData || deepEquals(oldData, newData))) {\n    return diff;\n  }\n\n  // If all items have been removed, just remove them, no need to diff\n  if (newLength <= 0) {\n    for (let i = 0; i < oldLength; i++) {\n      diff[i] = {\n        entry: oldData[i],\n        state: DiffState.removed,\n        index: i,\n      };\n    }\n    return diff;\n  }\n\n  // If there was no data before, add all items\n  if (!oldLength) {\n    for (let i = 0; i < newLength; i++) {\n      diff[i] = {\n        entry: newData[i],\n        state: DiffState.added,\n        index: i,\n      };\n    }\n    return diff;\n  }\n\n  // Count of how many items have been removed so far (inside the loop)\n  let removedCount = 0;\n\n  // diff the old data with the new one\n  for (let oi = 0; oi < oldLength; oi++) {\n    const newEntry = newData[oi - removedCount],\n      oldEntry = oldData[oi],\n      areEqual = key(oldEntry) == key(newEntry);\n\n    if (areEqual || deepEquals(oldEntry, newEntry)) {\n      continue;\n    }\n\n    const existsNew = !!newData.find(item => key(oldEntry) == key(item)),\n      existsOld = !!oldData.find(item => key(newEntry) == key(item));\n\n    // If the new entry does not exist in the old data, it means it was added\n    if (!existsOld && existsNew) {\n      diff.push({\n        entry: newEntry,\n        state: DiffState.added,\n        index: oi - removedCount,\n      });\n      removedCount--;\n      continue;\n    }\n\n    // If the old entry does not exist in the new data, it means it was removed\n    // `newEntry` can be undefined if the newData is shorter than the oldData\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    if ((existsOld && !existsNew) || newEntry == null) {\n      diff.push({\n        entry: oldEntry,\n        state: DiffState.removed,\n        index: oi,\n      });\n      removedCount++;\n      continue;\n    }\n\n    // If the new entry exists in the old data, it means it was swapped\n    if (newData.indexOf(oldEntry) >= 0) {\n      diff.push({\n        entry: newEntry,\n        targetEntry: oldEntry,\n        state: DiffState.swap,\n        index: oldData.indexOf(newData[oi - removedCount]),\n        targetIndex: oldData.indexOf(oldData[oi]),\n      });\n\n      // This swaps items, this is needed to create cohesive swapping\n      const oldIndex = oldData.indexOf(newEntry);\n      const temp = oldData[oi];\n      oldData[oi] = newData[oi - removedCount];\n      oldData[oldIndex] = temp;\n    }\n  }\n\n  // Add any new items that were not in the old data\n  if (removedCount != oldLength) {\n    for (let i = oldLength - removedCount; i < newLength; i++) {\n      const newEntry = newData[i];\n      diff.push({\n        entry: newEntry,\n        state: DiffState.added,\n        index: i,\n      });\n    }\n  }\n\n  return diff;\n}\n","import { genCss } from \"./css-generator.js\";\nimport { CTag, tag } from \"./tag.js\";\nimport type { AllTags, StyleSet, TagBuilder, TagChildren } from \"./types.js\";\n\n\n/** Override any tag function we want, to give it some custom behaviour, process the children, etc... */\nconst interceptors: Record<string, TagBuilder | ((styles: StyleSet[]) => CTag)> = {\n  ul: (children: TagChildren, mountToParent: boolean = false) => {\n    return tag(\n      'ul',\n      children.map((cl) => {\n        return tag('li', [cl], mountToParent);\n      }),\n    );\n  },\n  style: (styles: StyleSet[], mountToParent: boolean = false) => {\n    return tag('style', [genCss(styles)], mountToParent);\n  },\n};\n\n/**\n * List of all HTML tag functions. From `div` to `abbr` :)\n * If you want to create any other tag, use the {@link tag} function.\n *\n * @type {AllTags}\n * @example\n * ```ts\n * const { div, p, abbr, img, style, ... } = allTags;\n * ```\n */\nexport const allTags: AllTags = new Proxy(\n  {},\n  {\n    get: (t, p, r) => {\n      const tagName = p.toString();\n      const fn = (...children: any[]) => {\n        return interceptors[tagName] ? interceptors[tagName](children, false) : tag(tagName, children);\n      };\n\n      Object.defineProperty(fn, 'mount', {\n        get: () => {\n          return (...children: any[]) => {\n            return interceptors[tagName] ? interceptors[tagName](children, true) : tag(tagName, children, true);\n          };\n        },\n      });\n\n      return fn;\n    },\n  },\n) as AllTags;\n","import * as _context from './context.js';\nimport * as _tag from './tag.js';\nimport * as _styles from './style-manager.js';\n\nexport * from './context.js';\nexport * from './tag.js';\nexport * from './state.js';\nexport * from './css-generator.js';\nexport * from './util.js';\nexport * from './text.js';\nexport * from './events.js';\nexport * from './each.js';\nexport * from './lifecycle.js';\nexport * from './observables.js';\nexport * from './all-tags.js';\nexport type * from './types';\n\n\n/**\n * It initializes the framework & makes the body tag the mount point ({@link mountPoint}).\n * You can pass in a selector for an element you want to be the default tag (\"body\" by default).\n */\nexport const init = (options: { selector: string } = { selector: 'body' }) => {\n  _context.context.init = true;\n  _context.context.obs = _context.createGlobalObserver();\n  _context.context.styleManager = new _styles.StyleManager();\n\n  const tag = new _tag.CTag(`(${options.selector})`);\n  return _context.mountPoint(tag);\n};\n\nexport const version = '0.1.0'; // This should be replaced with the actual version from package.json during the build process\n","import { allTags, State, text } from '@nkeff/cardboard-js';\nconst { button, p, div } = allTags;\n\n// The `Counter` component creates a button that displays the number of clicks\nexport const Counter = (count: State<number>) => {\n    return button()\n        // The button displays the current count\n        .text(`Clicked $count times`, { count })\n        // `styled` adds the style to the global stylesheet, all instances of this button will have the same style\n        // This is useful for styling components that are reused multiple times\n        .styled({\n            color: '#333',\n            fontSize: '2rem',\n            padding: '1rem 2rem',\n            borderRadius: '0.5rem',\n            border: 'none',\n            outline: 'none',\n            backgroundColor: '#f0f0f0',\n            cursor: 'pointer',\n            transform: 'scale(1)',\n            transition: 'all 0.1s ease-in-out',\n            ':hover': {\n                backgroundColor: '#d9d9d9',\n                transform: 'scale(1.01)',\n            },\n            ':active': {\n                backgroundColor: '#d3d3d3',\n                transform: 'scale(0.97)',\n            }\n        }, 'counter')\n        // add a class to the button for styling\n        .addClass('clicker')\n        // add a click event listener\n        .clicked((self) => {\n            // When the button is clicked, increment the count\n            count.value++;\n        });\n};\n\n// The `ContionalComponent` component displays a message if the count is above 10\nexport const ContionalComponent = (count: State<number>) => {\n    // Create a derived/computed state that checks if the count is greater than 10\n    // This will automatically update when the count changes\n    // `greaterThan` is a utility function that checks if the value is greater than the specified number\n    return div(\n        p(text('Click $count more times', { count }))\n            .hideIf(count.greaterThanOr(5)),\n        p(`Count is above 5!!`)\n            .styled({\n                color: 'limegreen',\n            })\n            .hideIfNot(count.greaterThanOr(5))\n    );\n}","import { init, allTags, state, tag, getMountPoint, State, text } from '@nkeff/cardboard-js';\nimport { ContionalComponent, Counter } from './counter';\nconst { style, p } = allTags;\n\n/** \n * Consolidate the setup of your project here\n */\nfunction setup() {\n    // Initialize Cardboard\n    // This will initialize the Cardboard framework\n    // and create a root element referencing the 'body' by default\n    // You can also pass a custom selector if wanted\n    init({ selector: 'body' });\n\n    // Add custom stylesheet to the root element\n    tag('(html)').append(style({\n        body: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '100vh',\n            margin: '0',\n        },\n    }));\n}\n\n/** \n * Build the application here\n */\nfunction main() {\n    let count = state(0);\n\n    // The `getMountPoint` function retrieves the current mount point\n    // This will be the root element created by `init()`, point to the body by default\n    getMountPoint()?.append(\n        Counter(count),\n        ContionalComponent(count),\n    );\n}\n\n// This will run the setup and main functions when the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    setup();\n    main();\n});"]}